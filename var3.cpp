#include <iostream>
#include <iomanip>
#include <ctime>
#include <Windows.h> 

using namespace std;

void OneDimtoTwoDim(int size, string objects[], string TwoDim[][8]);
int ChooseLine(int size);
int ChooseCol(int size);
void printBoard(string board[][8], int size);
void show_time(time_t start, time_t end);


int main()
{
	setlocale(LC_ALL, "rus");
	int count = 0;
	string matrix[8][8];
	string variants[50] = { "  A  ", "  B  ", "  C  ", "  D  ", "  E  ", "  F  ", "  G  ", "  H  ", "  I  ", "  J  ",
						    "  K  ", "  L  ", "  M  ", "  N  ", "  O  ", "  P  ", "  R  ", "  S  ", "  T  ", "  U  ",
						    "  V  ", "  W  ", "  X  ", "  Y  ", "  Z  ", "  0  ", "  1  ", "  2  ", "  3  ", "  4  ",
						    "  5  ", "  6  ", "  7  ", "  8  ", "  9  ", "  +  ", "  *  ", "  !  ", "  @  ", "  #  ",
						    "  %  ", "  &  ", "  <  ", "  >  ", "  {  ", "  (  ", "  )  ", "  }  ", "  [  ", "  ]  " };

	int iGame = 0;

	cout << endl;
	cout << "=========== Игра Память ===========" << endl;  
	cout << endl;

	cout << " Новая игра    = 1" << endl; 
	cout << " Выход из игры = 0" << endl;

	cin >> iGame;

	system("CLS");

	if (iGame == 1)
	{
		cout << endl; // Соглашаемся играть
		
	}
	else return 0; //Выходим
	//time_t time_start = time(NULL);
//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************

	int iSize = 0;

	while (!(iSize >= 1 && iSize <= 4))
	{
		cout << " Выберите размер поля: " << endl; 
		cout << " 4x4 = 1" << endl;
		cout << " 6x6 = 2" << endl;
		cout << " 8x8 = 3" << endl;
		cout << " 2x2 = 4" << endl;

		cin >> iSize; // Выбираем размер поля
	}

	system("CLS");  

	int iLength = 0;

	if (iSize == 1) iSize = 4;
	if (iSize == 2) iSize = 6;
	if (iSize == 3) iSize = 8;
	if (iSize == 4) iSize = 2;
	
	
	cout << endl;

	iLength = iSize * iSize;

	//*************************************************************************************************************
	//*************************************************************************************************************
	//*************************************************************************************************************



	int show = 0; 

	while (!(show >= 1 && show <= 3))
	{
		cout << " Теперь выбирете, сколько секунд будет видно изображение карты " << endl;  
		cout << " 5 секунд  = 1" << endl;
		cout << " 3 секунды = 2" << endl;
		cout << " 1 секунда = 3" << endl;
		cin >> show;
	}

	system("CLS");

	cout << endl;

	if (show == 1) show = 5000;
	if (show == 2) show = 3000;
	if (show == 3) show = 1000;
	
	//*************************************************************************************************************
	//*************************************************************************************************************
	//*************************************************************************************************************



	for (int column = 0; column < iSize; column++) //Шапка колонок
	{
		cout << setw(10) << column; //Ширина элементов выходных данных
	}

	cout << endl;

	for (int line = 0; line < iSize; line++) // Строка // Распечатка доски по выбранным параметрам
	{  
		cout << " " << line << "|";

		for (int col = 0; col < iSize; col++) 
		{
			matrix[line][col] = " ??? "; // Рубашка

			cout << setw(10) << matrix[line][col];
		}

		cout << endl;
	}


	//*************************************************************************************************************
	//*************************************************************************************************************
	//*************************************************************************************************************


	srand(time(NULL));

	string temp;
	int iTemp;

	for (int x = 0; x < 50; x++) // rand
	{  
		iTemp = rand() % 49;
		temp = variants[x];
		variants[x] = variants[iTemp];
		variants[iTemp] = temp;
	}





	string sPlayList[64];
	int pairs = iLength / 2; // Создаем пары

	for (int y = 0, x = 0; y < iLength / 2; y++, x = x + 2) // Заполнение массива
	{  
		sPlayList[x] = variants[y];
		sPlayList[x + 1] = variants[y];
	}

	



	string sPlayBoard[8][8]; // Создание rand для плэйлиста в temp
	string temp1;
	int iTemp1;

	for (int x = 0; x < iLength; x++) 
	{
		iTemp1 = rand() % iLength;

		temp1 = sPlayList[x];
		sPlayList[x] = sPlayList[iTemp1];
		sPlayList[iTemp1] = temp1;
	}






	OneDimtoTwoDim(iSize, sPlayList, sPlayBoard);  

	//printBoard(sPlayBoard, iSize);  // Проверка ответов

	int line1, line2, col1, col2;

	int foundPairs = 0;  
	time_t time_start = time(NULL);
	while (true) 
	{
		while (true) //выбор первого поля на уже напечатанной доске
		{  
			line1 = ChooseLine(iSize);
			col1 = ChooseCol(iSize);

			if (matrix[line1][col1] == " ??? ")
			{
				break;
				
			}
			
		}
		count++;

		system("CLS");

		cout << endl;

		matrix[line1][col1] = sPlayBoard[line1][col1]; // Новая доска с чистым экраном
		printBoard(matrix, iSize);

		while (true) 
		{
			line2 = ChooseLine(iSize);  // Выбрать координаты
			col2 = ChooseCol(iSize);

			if (matrix[line2][col2] == " ??? " && (line1 != line2 || col1 != col2)) break;  // Проверка полей
			
			
		}
		count++;
		

		system("CLS");

		cout << endl;

		
//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************



		matrix[line2][col2] = sPlayBoard[line2][col2]; // Новая доска с двумя вариантами выбора на ней
		printBoard(matrix, iSize);                   

		if (matrix[line1][col1] == matrix[line2][col2]) // Если совпадают, удалить их, посчитать переменную
		{  
			Sleep(1000);

			foundPairs++; // Считает совпавшие пары

			matrix[line1][col1] = "  ";
			matrix[line2][col2] = "  ";

			Beep(659.26, 200); // Звук при совпадении
			Beep(659.26, 200);
			Sleep(200);
			Beep(659.26, 200);
			Sleep(100);
			Beep(523.26, 200);
			Beep(659.26, 200);
			Sleep(200);
			Beep(783.98, 200);
			Sleep(400);
			Beep(391.99, 200);

		}

		else 
		{
			Sleep(show);

			matrix[line1][col1] = " ??? ";   // Если нет совпадений, заменить ???
			matrix[line2][col2] = " ??? ";
			
			Beep(277, 500); // Звук при отсутствии совпадения
			Sleep(1.0 / 64 * 500);
			Beep(277, 500);
		}
		//count++;
		system("CLS");

		cout << endl;

		printBoard(matrix, iSize);  // Перепечатать доску, чтобы получить новую выборку

		if (foundPairs == pairs) break; // Все пары собраны, конец
			
		
	}
	time_t time_end = time(NULL);
	
	system("CLS");



	//*************************************************************************************************************
	//*************************************************************************************************************
	//*************************************************************************************************************


	cout << endl;
	cout << "Спасибо за игру!" << endl;
	cout << endl;
	cout << "     /:-]" << endl;

	
	show_time(time_start, time_end);
	cout << "Количество переворотов карт - " << count << endl;
	cout << endl;
	cout << endl;
	


	system("pause");
	return 0;
}


//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************





void OneDimtoTwoDim(int size, string variants[], string TwoDim[][8])
{
	for (int line1 = 0, oneDimPos1 = 0; line1 < size; line1++) // make a one dim into a two dim.
	{  
		for (int col1 = 0; col1 < size; col1++, oneDimPos1++) 
		{
			TwoDim[line1][col1] = variants[oneDimPos1];
		}
	}
}




//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************


int ChooseLine(int size) 
{
	int line = 9;

	while (!(line >= 0 && line <= size - 1)) // Проверка входных данных строк
	{  
		cout << "Выберите строку ";

		cin >> line;
	}
	
	return line;
}



//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************

int ChooseCol(int size) // Проверка входных данных колонки
{
	int col = 9;

	while (!(col >= 0 && col <= size - 1)) 
	{  
		cout << "Выберите колонку ";

		cin >> col;
	}

	return col;
}


//*************************************************************************************************************
//*************************************************************************************************************
//*************************************************************************************************************



void printBoard(string board[][8], int size) //Печать доски
{
	for (int l = 0; l < size; l++) 
	{  
		cout << setw(10) << l;
	}

	cout << endl;

	cout << "---------------------------------------------------------------------------------------" << endl;

	for (int line = 0; line < size; line++) 
	{
		cout << " " << line << "|";

		for (int col = 0; col < size; col++) 
		{
			cout << setw(9) << board[line][col] << " ";
		}

		cout << endl;
	}
}







void show_time(time_t start, time_t end)
{
	int seconds = 0;
	int minutes = 0;

	seconds = end - start;
	minutes = seconds / 60;
	seconds = seconds % 60;
	cout << "\n\n\n";
	cout << "=========== Статистика: =========== " << endl;
	cout<< "Ваше время - " << minutes << " мин. " << seconds << " сек. \n";
	
}


	
	
